{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Logverz Main stack",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "Environment Settings"
					},
					"Parameters": ["SourcesBucket", "SourcesPath", "NumberOfControllers", "TokenSigningPassphrase", "Tags"]
				},
				{
					"Label": {
						"default": "Network Settings"
					},
					"Parameters": ["VPCID", "PrivateSubnet", "PublicSubnet"]
				},
				{
					"Label": {
						"default": "DataBase Settings"
					},
					"Parameters": ["DBEngineType", "DBInstanceClass", "DBSnapshotID", "DBDeploymentMethod", "DBPrincipalProperty", "DBAllocatedStorage", "DBUserName", "DBUserPasswd" ]
				},
				{
					"Label": {
						"default": "WebRTC proxy and Turn Server Settings"
					},
					"Parameters": ["myKeyPair", "WebRTCProxyInstanceSize", "WebRTCProxyASGConfig", "WebRTCProxyKey", "TurnSrvInstanceSize", "TurnSrvASGConfig", "TurnSrvPassword"]
				},
				{
					"Label": {
						"default": "Advanced Settings"
					},
					"Parameters": ["EnableSocialIdenties", "WebRTCProxyAmiId", "TurnServerAmiId", "PublicKeyVersion", "MaximumCacheTime", "StageName"]
				}
			]
		}
	},
	"Transform": "AWS::Serverless-2016-10-31",
	"Parameters":{
		"SourcesBucket": {
			"Description": "The bucket containing the sources for the Logverz system, in short format such as \"my-bucket-name\"",
			"Default": "yourexistingbucketname",
			"Type": "String"
		},
		"SourcesPath": {
			"Description": "The path of the sources, in case the installer file is in the bucket root than only \"init_v.x.y.z.zip\", otherwise \"the/path/to/init_v.x.y.z.zip\" note there is no slash \"/\" at the start of path.",
			"Default": "the/path/to/init_v.x.y.z.zip",
			"Type": "String"
		},
		"NumberOfControllers":{
			"Description":"The Number of Small/Medium/Large size Controller \"instances\".",
			"Type": "String",
			"Default": "2/1/0"
		},
		"TokenSigningPassphrase":{
			"NoEcho": "true",
			"Description":"Used by the web UI for signing web tokens (JWT) to identify users. Min length 16 charachters,if left Default 'autogeneratedkey', it will generate a 26-34 charachter length random string retrievable at Parameter store /Logverz/Logic/Passphrase",
			"Default": "autogeneratedkey",
			"Type": "String",
			"MinLength" : "16"
		},
		"Tags": {
			"Description": "The tags associated with the Database server, lambda functions,Codebuild environments and other resources, in key value pairs in JSON format",
			"Default": "{\"Key\":\"Logverz\",\"Value\":\"-\"}",
			"Type": "String"
		},
		"VPCID": {
			"Description": "Select the VPC where you want to deploy the solution to. Absence of special requirements the Default VPC is suggested",
			"Type": "AWS::EC2::VPC::Id",
			"AllowedPattern": "vpc-.*"
		},
		"PrivateSubnet": {
			"Description": "Specify minimum two Private Subnets where you want to deploy the solution to. It has to be a Private subnet with internet access, which is usually provided by a NATGW. Also 100+ free ips per subnet is advised.",
			"Type": "List<AWS::EC2::Subnet::Id>"
		},
		"PublicSubnet": {
			"Description": "Specify minimum two Public Subnets where the route table usually targets the Internet Gateway. It is needed for webclient <-> WebRTC Proxy connectivity, a.k.a. TURN service",
			"Type": "List<AWS::EC2::Subnet::Id>"
		},
		"DBAllocatedStorage": {
			"Type": "Number",
			"Default": "10",
			"Description": "Number of Gigabytes the database partition has.You can't decrease disk space after its set, only increase it."
		},
		"DBInstanceClass": {
			"Type": "String",
			"Default": "db.t3.micro",
			"AllowedValues": ["db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large", "db.t3.micro", "db.t3.small", "db.t3.medium", "db.t3.large", "db.t3.xlarge", "db.t3.2xlarge", "db.m5.2xlarge", "db.m5.4xlarge", "db.serverless:0.5-2", "db.serverless:0.5-8", "db.serverless:0.5-32", "db.serverless:0.5-128"],
			"Description": "The database capacity, determines the maximum number of parallel lambda collectors, at t2.micro size its approximately 40, while a db.serverless:0.5-2 is up to 300."
		},
		"DBSnapshotID": {
			"Type": "String",
			"Default": "",
			"Description": "Leave empty at initial deployment, any other time provide the latest MANUAL-ly created backup's ARN. The data is going to be restored at scale up or scale down event, not doing that could result in an EMPTY instance, all DATA LOST.",
			"AllowedPattern": "^$|arn:aws:rds:.*"
		},
		"DBDeploymentMethod": {
			"Type": "String",
			"Default": "Server",
			"AllowedValues": ["Serverless", "Server"],
			"Description": "Select the deployment method Serverless (Aurora V2) or classic RDS instances. Note Serverless is not available for Microsoft sqlserver engine."
		},
		"DBPrincipalProperty": {
			"Type": "String",
			"Default": "EngineType",
			"AllowedValues": ["EngineType", "DeploymentMethod"],
			"Description": "Select the most important charachteristic of the DB. In case the combination of selected EngineType and Deployment method is not supported by AWS, which option will take precedence. Example user selects serverless mysql but it is not available in his/her region. Based on this property the computed result will be either mysql servertype deployment (EngineType) or serverless postgres deployment (DeploymentMethod). In the edge cases that serverless postgress is also missing than result will be mysql with server type deployment."
		},
		"DBEngineType": {
			"Type": "String",
			"Default": "postgres",
			"AllowedValues": ["postgres", "mysql", "sqlserver-web", "sqlserver-ex", "sqlserver-se", "sqlserver-ee" ],
			"Description": "Select the Database Engine, which can be either postgres, mysql, various editions of Microsoft sqlserver-XX (web,ex,se,ee) is also supported. Default is postgres."
		},
		"DBUserName": {
			"NoEcho": "true",
			"Description": "Please specify a database username,other than Admin,the credentials are saved to SSM parameter store.",
			"Type": "String",
			"MinLength": "5",
			"MaxLength": "30",
			"AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
		},
		"DBUserPasswd": {
			"NoEcho": "true",
			"Description": "The database users password, the credentials are saved to SSM parameter store.The password can include any printable ASCII character except \"/\", \"\"\", or \"@\".",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "41"
		},
		"WebRTCProxyAmiId": {
			"Description": "The container instance image which runs the DB proxy container.",
			"Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
			"Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
		},
		"WebRTCProxyKey":{
			"NoEcho": "true",
			"Description":"Used by the WebRTCProxy Container for encrypted communication with the Logverz-WebRTCSignal function. Min length 16 charachters. By default \"autogeneratedkey\" is specified,it will generate a random string retrievable at Parameter store /Logverz/Logic/WebRTCProxyKey",
			"Type": "String",
			"MinLength" : "16",
			"MaxLength" : "34",
			"Default": "autogeneratedkey"
		},
		"WebRTCProxyInstanceSize":{
			"Description":"The size of the webrtcproxy container.",
			"Default": "micro",
			"Type": "String",
			"AllowedValues" : ["nano", "micro", "small", "medium", "large", "xlarge"]
		},
		"WebRTCProxyASGConfig":{
			"Description":"The minimum, desired and maximum number of instances",
			"Default": "0,0,3",
			"Type": "String"
		},
		"TurnSrvASGConfig":{
			"Description":"The minimum, desired and maximum number of instances",
			"Default": "0,0,2",
			"Type": "String"
		},
		"TurnSrvPassword":{
			"NoEcho": "true",
			"Description":"Needed for webclient <-> WebRTC Proxy connectivity in case there is no direct route between clients. A.k.a. TURN,STURN service, minimum password length 16 charachters.",
			"Default": "autogeneratedkey",
			"Type": "String",
			"MinLength" : "16"
		},
		"TurnSrvInstanceSize":{
			"Description":"The size of the TurnServer.",
			"Default": "nano",
			"Type": "String",
			"AllowedValues" : ["nano", "micro", "small", "medium", "large"]
		},
		"TurnServerAmiId": {
			"Description": "The Turn Server AMI ID as pare: https://discourse.ubuntu.com/t/finding-ubuntu-images-with-the-aws-ssm-parameter-store/15507",
			"Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
			"Default": "/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id"
		},
		"myKeyPair" : {
			"Description" : "Amazon EC2 Key Pair, optional, if added please use the *exact* case capitialisation as you see in the AWS console.",
			"Default":"",
			"Type" : "String"
		},
		"EnableSocialIdenties": {
			"Description": "Recomended to do enabled once stack is deployed. Step 1: register an account at the choosen Identity provider than configure Idp.Step 2: get the configuration and add it to Logverz-CustomConfig.json. Step three enable and update stack.For additional details see the documentation how to enable external identity providers",
			"Default": "false",
			"Type": "String",
			"AllowedValues" : ["true", "false"]
		},
		"PublicKeyVersion":{
			"Description":"The public key version number, in case you modify public key the lambda functions need to be updated as well.",
			"Type": "String",
			"Default": "/Logverz/Logic/PublicKey:1"
		},
		"MaximumCacheTime":{
			"Description":"The maximum time (in minutes) that lambdas may cache the permissions of the connected user.",
			"Type": "Number",
			"MinValue":"1",
			"Default": "20"
		},
		"StageName":{
			"Description": "The name of the API gateway stage, that appears in the url. Example ...amazonaws.com/StageName",
			"Default":"V3",
			"Type": "String"
		}
	},
	"Conditions": {
		"EnableSocialIdenties" : {"Fn::Equals" : [{"Ref" : "EnableSocialIdenties"}, "true"]},
		"multipleinstancetypes" : {"Fn::Equals" : [{ "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Instances"]}, "t3,t3a"]},
		"singleinstancetypes" : {"Fn::Equals" : [{ "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Instances"]}, "t3"]},
		"HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "myKeyPair"}]}]}
	},
	"Mappings" : {
		"RegionMap" : {
			"af-south-1":{"Instances" : "t3"},
			"ap-northeast-1" : {"Instances" : "t3,t3a"},
			"ap-southeast-1" : {"Instances" : "t3,t3a"},
			"eu-central-1": {"Instances" : "t3,t3a"},
			"eu-west-1": {"Instances" : "t3,t3a"},
			"eu-west-2": {"Instances" : "t3,t3a"},
			"us-east-1": {"Instances" : "t3,t3a"},
			"us-east-2": {"Instances" : "t3,t3a"},
			"ap-east-1": {"Instances" :"t3"},
			"ap-northeast-2":{"Instances" : "t3,t3a"},
			"ap-southeast-2" : {"Instances" : "t3,t3a"},
			"ca-central-1": {"Instances" : "t3,t3a"},
			"eu-north-1": {"Instances" :"t3"},
			"eu-south-1": {"Instances" :"t3"},
			"me-south-1": {"Instances" :"t3"},
			"us-west-1":{"Instances" : "t3,t3a"},
			"ap-northeast-3":{"Instances" : "t3,t3a"},
			"ap-south-1":{"Instances" : "t3,t3a"},
			"eu-west-3":{"Instances" : "t3,t3a"},
			"sa-east-1":{"Instances" : "t3,t3a"},
			"us-west-2":{"Instances" : "t3,t3a"}
		}
	},
	"Resources": {
		"InitBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties":{
				"LifecycleConfiguration":{
					"Rules" :[{
						"AbortIncompleteMultipartUpload": {
							"DaysAfterInitiation": 1
						},
						"Id": "Remove old versions",
						"ExpirationInDays" : 270,
						"Status": "Enabled"
					}]
				},
				"VersioningConfiguration" :{
					"Status":"Enabled"
				}
			}
		},
		"EngineBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties" : {
				"LifecycleConfiguration" : {
					"Rules": [
						{
							"Id": "Remove failed upload chunks",
							"Status": "Enabled",
							"AbortIncompleteMultipartUpload": {
								"DaysAfterInitiation": 1
							}
						}
					]
				},
				"Tags": [{
					"Key": "Function",
					"Value": "Logverz"
				}]
			}
		},
		"LogicBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties" : {
				"LifecycleConfiguration" : {
					"Rules": [
						{
							"Id": "Remove failed upload chunks",
							"Status": "Enabled",
							"AbortIncompleteMultipartUpload": {
								"DaysAfterInitiation": 1
							}
						}
					]
				},
				"VersioningConfiguration" :{
					"Status":"Enabled"
				}
			}
		},
		"WebRTCBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties":{
				"LifecycleConfiguration":{
					"Rules" :[{
						"AbortIncompleteMultipartUpload": {
							"DaysAfterInitiation": 1
						},
						"Id": "Remove old versions",
						"NoncurrentVersionExpirationInDays" : 3,
						"Status": "Enabled"
					}]
				},
				"VersioningConfiguration" :{
					"Status":"Enabled"
				}
			}
		},
		"LogverzUsers": {
			"Type" : "AWS::IAM::Group",
			"Properties" : {
				"GroupName" : {
					"Fn::Sub": "LogverzUsers-${AWS::Region}"
				}
			}
		},
		"LogverzPowerUsers": {
			"Type" : "AWS::IAM::Group",
			"Properties" : {
				"GroupName" :
				{
					"Fn::Sub": "LogverzPowerUsers-${AWS::Region}"
				}
			}

		},
		"LogverzDBIAMGroup": {
			"Type" : "AWS::IAM::Group",
			"Properties" : {
				"GroupName" :
				{
					"Fn::Sub": ["Logverz-DBGroup-${DBFriendlyName}-${AWS::Region}", {
						"DBFriendlyName": "DefaultDB"
					}]
				}
			}
		},
		"APIGWLogverzLogic": {
			"Type": "AWS::ApiGateway::RestApi",
			"Properties": {
				"Description": "Logverz API endpoint",
				"Name": "Logverz-Logic",
				"EndpointConfiguration" :{
					"Types" : ["REGIONAL"]
				},
				"BinaryMediaTypes":[
					"font/ttf",
					"application/pdf",
					"image/png",
					"image/svg+xml",
					"image/jpeg",
					"image/apng",
					"image/webp",
					"image/*",
					"image/x-icon",
					"font/woff2",
					"font/woff",
					"font/*"
				]
			}
		},
		"BuildPolicy": {
			"Description": "Setting IAM policy for service role for CodeBuild",
			"Properties": {
				"PolicyDocument": {
					"Statement": [
						{
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents",
								"s3:ListAllMyBuckets"
							],
							"Effect": "Allow",
							"Resource": "*"
						},
						{
							"Action": [
								"ec2:CreateNetworkInterface",
								"ec2:DescribeNetworkInterfaces",
								"ec2:DeleteNetworkInterface",
								"ec2:DescribeSecurityGroups",
								"ec2:DescribeSubnets",
								"ec2:DescribeVpcs",
								"ec2:DescribeDhcpOptions",
								"ec2:CreateNetworkInterfacePermission"
							],
							"Effect": "Allow",
							"Resource": "*"
						},
						{
							"Action": [
								"s3:PutObject",
								"s3:GetObject",
								"s3:GetObjectVersion",
								"s3:List*",
								"s3:CreateBucket",
								"s3:GetBucketLocation",
								"s3:GetBucketAcl",
								"s3:DeleteObjectVersion",
								"s3:DeleteObject"
							],
							"Effect": "Allow",
							"Resource": [
								{
									"Fn::Join": [
										"",
										[
											{
												"Fn::GetAtt": [
													"InitBucket",
													"Arn"
												]
											},
											"/*"
										]
									]
								}, {
									"Fn::Join": [
										"",
										[
											{
												"Fn::GetAtt": [
													"InitBucket",
													"Arn"
												]
											}
										]
									]
								},
								{
									"Fn::GetAtt": [
										"EngineBucket",
										"Arn"
									]
								},
								{
									"Fn::Join": [
										"", [{
											"Fn::GetAtt": [
												"EngineBucket",
												"Arn"
											]
										},
										"/*"
										]
									]
								},
								{
									"Fn::GetAtt": [
										"LogicBucket",
										"Arn"
									]
								},
								{
									"Fn::Join": [
										"", [{
											"Fn::GetAtt": [
												"LogicBucket",
												"Arn"
											]
										},
										"/*"
										]
									]
								},
								{
									"Fn::GetAtt": [
										"WebRTCBucket",
										"Arn"
									]
								},
								{
									"Fn::Join": [
										"", [{
											"Fn::GetAtt": [
												"WebRTCBucket",
												"Arn"
											]
										},
										"/*"
										]
									]
								}
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"ssm:DescribeParameters"
							],
							"Resource": "*"
						},
						{
							"Effect": "Allow",
							"Action": [
								"codebuild:StartBuild"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/Logverz*"
							}
						},
						{
							"Effect": "Allow",
							"Action": "ecr:GetAuthorizationToken",
							"Resource": "*"
						},
						{
							"Action": [
								"ecr:BatchCheckLayerAvailability",
								"ecr:CompleteLayerUpload",
								"ecr:GetAuthorizationToken",
								"ecr:InitiateLayerUpload",
								"ecr:PutImage",
								"ecr:UploadLayerPart",
								"ecr:BatchDeleteImage",
								"ecr:ListImages"
							],
							"Effect": "Allow",
							"Resource": { "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/logverz*"}
						},
						{	"Sid": "RemoveusersfromLogverzusersgroup",
							"Action": [
								"iam:GetGroup",
								"iam:RemoveUserFromGroup"
							],
							"Effect": "Allow",
							"Resource": { "Fn::Sub":"arn:aws:iam::${AWS::AccountId}:group/LogverzUsers"}
						},
						{
							"Action": [
								"ssm:DeleteParameter",
								"ssm:GetParametersByPath",
								"ssm:GetParameters",
								"ssm:GetParameter"
							],
							"Effect": "Allow",
							"Resource": {
								"Fn::Sub":"arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Logverz*"
							}
						},
						{
							"Sid": "webappbuild",
							"Effect": "Allow",
							"Action": "apigateway:GET",
							"Resource": [
								{"Fn::Sub": "arn:aws:apigateway:${AWS::Region}::/domainnames/*"},
								{"Fn::Sub":"arn:aws:apigateway:${AWS::Region}::/domainnames"}
							]
						},
						{
							"Sid": "lambdaupdate",
							"Effect": "Allow",
							"Action": [
								"lambda:GetFunction",
								"lambda:UpdateFunctionCode"
							],
							"Resource": {
								"Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Logverz*"
							}
						},
						{
							"Sid": "interactivebuild",
							"Effect": "Allow",
							"Action": [
								"ssmmessages:CreateControlChannel",
								"ssmmessages:CreateDataChannel",
								"ssmmessages:OpenControlChannel",
								"ssmmessages:OpenDataChannel"
							],
							"Resource": "*"
						}
					]
				},
				"PolicyName": {
					"Fn::Sub": "Logverz-BuildPolicy-${AWS::Region}"
				},
				"Roles": [
					{
						"Ref": "BuildRole"
					}
				]
			},
			"Type": "AWS::IAM::Policy"
		},
		"BuildRole": {
			"Description": "Creating Logverz controller service role in IAM for AWS CodeBuild.",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Action": "sts:AssumeRole",
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"codebuild.amazonaws.com"
								]
							}
						}
					]
				},
				"Path": "/",
				"RoleName": {
					"Fn::Sub": "Logverz-BuildRole-${AWS::Region}"
				}
			},
			"Type": "AWS::IAM::Role"
		},
		"BuildEnvironment": {
			"Type": "AWS::CodeBuild::Project",
			"DependsOn":"BuildPolicy",
			"Properties": {
				"Name": "LogverzBuild",
				"ServiceRole": {
					"Ref": "BuildRole"
				},
				"Artifacts": {
					"Type": "NO_ARTIFACTS"
				},
				"Environment": {
					"Type": "LINUX_CONTAINER",
					"ComputeType": "BUILD_GENERAL1_SMALL",
					"Image": "aws/codebuild/standard:7.0",
					"EnvironmentVariables": [
						{
							"Name": "InitBucket",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "InitBucket"
							}
						},
						{
							"Name": "LogicBucket",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "LogicBucket"
							}
						},
						{
							"Name": "VPCID",
							"Type": "PLAINTEXT",
							"Value": {
								"Ref": "VPCID"
							}
						},
						{
							"Name": "PrivateSubnet",
							"Type": "PLAINTEXT",
							"Value": {
								"Fn::Join": [
									",",
									{
										"Ref": "PrivateSubnet"
									}
								]
							}
						},
						{
							"Name": "AWS_DEFAULT_REGION",
							"Type": "PLAINTEXT",
							"Value": { "Ref" : "AWS::Region" }
						},
						{
							"Name": "AWS_ACCOUNT_ID",
							"Type": "PLAINTEXT",
							"Value": { "Ref" : "AWS::AccountId" }
						},
						{
							"Name": "IMAGE_REPO_NAME",
							"Type": "PLAINTEXT",
							"Value": { "Ref" : "WebRTCProxyRepository" }
						},
						{
							"Name": "IMAGE_TAG",
							"Type": "PLAINTEXT",
							"Value": "latest"
						},
						{
							"Name":"URL",
							"Type":"PLAINTEXT",
							"Value":{"Fn::Sub":[
								"https://${apigateway}.execute-api.${AWS::Region}.amazonaws.com", {"apigateway":{"Ref": "APIGWLogverzLogic"}}
							]}
						}, {
							"Name":"STAGE",
							"Type":"PLAINTEXT",
							"Value":{ "Fn::Join" : [ "", ["/",
								{"Fn::Sub":["${StageName}", {"StageName":{"Ref": "StageName"}}]}
							]]
							}
						}],
					"PrivilegedMode":"true"
				},
				"Source": {
					"BuildSpec" : "buildspec_init.yaml",
					"Type": "S3",
					"Location": {
						"Fn::Join": [
							"",
							[
								{
									"Ref": "InitBucket"
								},
								"/bin/sources.zip"
							]
						]
					}
				},
				"TimeoutInMinutes":20
			}
		},
		"InitiateFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"S3Bucket": {"Ref":"SourcesBucket"},
					"S3Key": {"Ref":"SourcesPath"}
				},
				"Environment": {
					"Variables": {
						"CBProject" : {"Ref": "BuildEnvironment"},
						"InitBucket":{"Ref":"InitBucket"},
						"WaitConditionHandler":{"Ref":"SourcesAvailabilityCheck"},
						"LogverzBuckets":{"Fn::Sub":[ "${InitBucket},${EngineBucket},${LogicBucket},${WebRTCBucket}", {
							"InitBucket":{
								"Ref": "InitBucket"
							},
							"EngineBucket":{
								"Ref": "EngineBucket"
							},
							"LogicBucket":{
								"Ref": "LogicBucket"
							}, "WebRTCBucket":{
								"Ref": "WebRTCBucket"
							}
						}]},
						"SourcesBucket":{
							"Ref":"SourcesBucket"
						},
						"SourcesPath":{
							"Ref":"SourcesPath"
						}
					}
				},
				"Description": "The lambdafunction puts dependencies as sources.zip to s3 and builds it with Codebuild. ",
				"FunctionName": "Logverz-Initiate",
				"Handler": "initiate.handler",
				"Role": {
					"Fn::GetAtt": ["InitiateRole", "Arn"]
				},
				"Runtime": "nodejs16.x",
				"MemorySize":"256",
				"Timeout": "360"
			}
		},
		"InitiateResource": {
			"Type": "Custom::LambdaFunction",
			"DependsOn":["InitiatePolicy", "InitiateFunction"],
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitiateFunction",
						"Arn"
					]
				},
				"SourcesPath": {
					"Ref": "SourcesPath"
				},
				"SourcesBucket": {
					"Ref": "SourcesBucket"
				}
			}
		},
		"InitiateRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						},
						"Action": "sts:AssumeRole"
					}]
				},
				"RoleName": {
					"Fn::Sub": "Logverz-InitiateRole-${AWS::Region}"
				}
			}
		},
		"InitiatePolicy": {
			"Type": "AWS::IAM::Policy",
			"Description": "IAM policy for Initiate Lambda function",
			"Properties": {
				"PolicyName": {
					"Fn::Sub": "Logverz-InitiatePolicy-${AWS::Region}"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Action": [
							"ssm:PutParameter",
							"ssm:GetParameter",
							"ssm:DeleteParameter",
							"ssm:GetParametersByPath"
						],
						"Effect": "Allow",
						"Resource": {
							"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/Logverz*"
						}
					},
					{
						"Action": "kms:Decrypt",
						"Effect": "Allow",
						"Resource": "*"
					},
					{
						"Action": [
							"logs:CreateLogGroup",
							"logs:CreateLogStream",
							"logs:PutLogEvents"
						],
						"Effect": "Allow",
						"Resource": "*"
					},
					{
						"Effect": "Allow",
						"Action": [
							"codebuild:StartBuild",
							"codebuild:BatchGetBuilds"
						],
						"Resource": {
							"Fn::Sub": "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/Logverz*"
						}
					},
					{
						"Action": [
							"s3:PutObject",
							"s3:Get*",
							"s3:List*",
							"s3:DeleteObjectVersion",
							"s3:DeleteObject"
						],
						"Effect": "Allow",
						"Resource": [{
							"Fn::GetAtt": [
								"InitBucket",
								"Arn"
							]
						},
						{
							"Fn::Join": [
								"", [{
									"Fn::GetAtt": [
										"InitBucket",
										"Arn"
									]
								},
								"/*"
								]
							]
						},
						{
							"Fn::GetAtt": [
								"EngineBucket",
								"Arn"
							]
						},
						{
							"Fn::Join": [
								"", [{
									"Fn::GetAtt": [
										"EngineBucket",
										"Arn"
									]
								},
								"/*"
								]
							]
						},
						{
							"Fn::GetAtt": [
								"LogicBucket",
								"Arn"
							]
						},
						{
							"Fn::Join": [
								"", [{
									"Fn::GetAtt": [
										"LogicBucket",
										"Arn"
									]
								},
								"/*"
								]
							]
						},
						{
							"Fn::GetAtt": [
								"WebRTCBucket",
								"Arn"
							]
						},
						{
							"Fn::Join": [
								"", [{
									"Fn::GetAtt": [
										"WebRTCBucket",
										"Arn"
									]
								},
								"/*"
								]
							]
						}
						]
					},
					{
						"Effect": "Allow",
						"Action": "ecr:GetAuthorizationToken",
						"Resource": "*"
					},
					{
						"Action": [
							"ecr:BatchCheckLayerAvailability",
							"ecr:CompleteLayerUpload",
							"ecr:GetAuthorizationToken",
							"ecr:InitiateLayerUpload",
							"ecr:PutImage",
							"ecr:UploadLayerPart",
							"ecr:BatchDeleteImage",
							"ecr:ListImages"
						],
						"Effect": "Allow",
						"Resource": { "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/logverz*"}
					},
					{	"Sid": "RemoveusersfromLogverzusersgroup",
						"Action": [
							"iam:GetGroup",
							"iam:RemoveUserFromGroup"
						],
						"Effect": "Allow",
						"Resource": [
							{ "Fn::Sub":"arn:aws:iam::${AWS::AccountId}:group/LogverzUsers*"},
							{ "Fn::Sub":"arn:aws:iam::${AWS::AccountId}:group/LogverzPowerUsers*"}
						]
					},
					{
						"Sid": "AutogenerateIdentityDBentries",
						"Action": [
							"lambda:InvokeFunction"
						],
						"Effect": "Allow",
						"Resource": {
							"Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Logverz-IdentitySync"
						}

					},
					{	"Sid": "UpdateLambdaPropertiesEnvVars",
						"Action": [
							"lambda:updateFunctionConfiguration",
							"lambda:getFunctionConfiguration"
						],
						"Effect": "Allow",
						"Resource": { "Fn::Sub":"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:Logverz-*"}
					},
					{
						"Sid": "DeployApiGateway",
						"Effect": "Allow",
						"Action": [
							"apigateway:POST"
						],
						"Resource":{
							"Fn::Sub":[
								"arn:aws:apigateway:${AWS::Region}::/restapis/${apigateway}/deployments", {"apigateway":{"Ref": "APIGWLogverzLogic"}}
							]
						}
					}
					]
				},
				"Roles": [{
					"Ref": "InitiateRole"
				}]
			}
		},
		"WebRTCProxyRepository":{
			"Type" : "AWS::ECR::Repository",
			"Properties" : {
				"LifecyclePolicy": {"LifecyclePolicyText":
					"{\"rules\":[{\"rulePriority\":1,\"description\":\"remove un-tagged images after specified number of days.\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"sinceImagePushed\",\"countUnit\":\"days\",\"countNumber\":3},\"action\":{\"type\":\"expire\"}}]}"},
				"RepositoryName" : "logverz/webrtcproxy",
				"RepositoryPolicyText":{
					"Version":"2008-10-17",
					"Statement":[
						{
							"Sid":"AllowPushPull",
							"Effect":"Allow",
							"Principal":{
								"AWS":[
									{
										"Fn::Join":[
											"",
											[
												"arn:aws:iam::",
												{
													"Ref":"AWS::AccountId"
												},
												":root"
											]
										]
									}
								]
							},
							"Action":[
								"ecr:GetDownloadUrlForLayer",
								"ecr:BatchGetImage",
								"ecr:BatchCheckLayerAvailability",
								"ecr:PutImage",
								"ecr:InitiateLayerUpload",
								"ecr:UploadLayerPart",
								"ecr:CompleteLayerUpload"
							]
						}
					]
				}
			}
		},
		"SourcesAvailabilityCheck" : {
			"Type" : "AWS::CloudFormation::WaitConditionHandle",
			"Properties" : {
			}
		},
		"LambdaSourcesAvailable" : {
			"Type" : "AWS::CloudFormation::WaitCondition",
			"DependsOn" : ["InitiatePolicy", "BuildPolicy"],
			"Properties" : {
				"Handle" : { "Ref" : "SourcesAvailabilityCheck" },
				"Timeout" : "600"
			}
		},
		"DBSecGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allows Database connection to the associated components (Database,WebRTCProxy,Lambda) ",
				"Tags": [{
					"Key": "Function",
					"Value": "Logverz"
				}],
				"VpcId": { "Ref" : "VPCID" }
			}
		},
		"DBSecGroup4PGSQL": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"DependsOn":"Transform",
			"Properties": {
				"GroupId": {
					"Ref": "DBSecGroup"
				},
				"IpProtocol": "tcp",
				"FromPort": "5432",
				"ToPort": "5432",
				"SourceSecurityGroupId": {
					"Ref": "DBSecGroup"
				}
			}
		},
		"DBSecGroup4MSSQL": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"DependsOn":"Transform",
			"Properties": {
				"GroupId": {
					"Ref": "DBSecGroup"
				},
				"IpProtocol": "tcp",
				"FromPort": "1433",
				"ToPort": "1433",
				"SourceSecurityGroupId": {
					"Ref": "DBSecGroup"
				}
			}
		},
		"DBSecGroup4MYSQL": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"DependsOn":["Transform", "DatabaseRegistry"],
			"Properties": {
				"GroupId": {
					"Ref": "DBSecGroup"
				},
				"IpProtocol": "tcp",
				"FromPort": "3306",
				"ToPort": "3306",
				"SourceSecurityGroupId": {
					"Ref": "DBSecGroup"
				}
			}
		},
		"SetConnectionParamsDB": {
			"Type": "AWS::Lambda::Function",
			"DependsOn":"LambdaSourcesAvailable",
			"Properties": {
				"Code": {
					"S3Bucket": {"Ref":"InitBucket"},
					"S3Key": "bin/setconnectionparamsdb.zip"
				},
				"Environment": {
					"Variables": {
						"StackName" : {"Ref": "AWS::StackName"}
					}
				},
				"Description": "Sets DB connection string parameters and various credentials as secure-string.",
				"FunctionName": "Logverz-SetConnectionParamsDB",
				"Handler": "setconnectionparamsdb.handler",
				"Role": {
					"Fn::GetAtt": ["SetConnectionParamsDBRole", "Arn"]
				},
				"Runtime": "nodejs18.x",
				"MemorySize":"320",
				"Timeout": "60"
			}
		},
		"SetDBConnectionResource": {
			"Type": "Custom::LambdaFunction",
			"DependsOn": ["InitiateResource", "SetConnectionParamsDBPolicy"],
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"SetConnectionParamsDB",
						"Arn"
					]
				},
				"LogverzDBSecretRef":"/Logverz/Database/DefaultDBPassword",
				"DBpassword": {
					"Ref": "DBUserPasswd"
				},
				"WebRTCProxyKey":{
					"Ref":"WebRTCProxyKey"
				},
				"TokenSigningPassphrase": {
					"Ref":"TokenSigningPassphrase"
				},
				"TurnSrvPassword":{
					"Ref":"TurnSrvPassword"
				},
				"Mode":"RegisterSecret"
			}
		},
		"SetConnectionParamsDBRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						},
						"Action": "sts:AssumeRole"
					}]
				},
				"RoleName":{
					"Fn::Sub":"Logverz-SetConnectionParamsDBRole-${AWS::Region}"
				}
			}
		},
		"SetConnectionParamsDBPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName":{
					"Fn::Sub": "Logverz-SetConnectionParamsDBPolicy-${AWS::Region}"
				},
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"ssm:DescribeParameters"
							],
							"Resource": "*"
						},
						{
							"Action": [
								"ssm:PutParameter",
								"ssm:GetParameter",
								"ssm:DeleteParameter",
								"ssm:GetParameters"
							],
							"Effect": "Allow",
							"Resource": {
								"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*Logverz*"
							}
						},
						{
							"Action": "kms:Decrypt",
							"Effect": "Allow",
							"Resource": "*"
						},
						{
							"Action": "logs:*",
							"Effect": "Allow",
							"Resource": "arn:aws:logs:*:*:*"
						},
						{
							"Sid": "RecordErrors",
							"Effect": "Allow",
							"Action": [
								"dynamodb:PutItem"
							],
							"Resource":[
								{
									"Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Logverz-Invocations"
								},
								{
									"Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Logverz-Queries"
								}
							]
						}
					]
				},
				"Roles": [{
					"Ref": "SetConnectionParamsDBRole"
				}]
			}
		},
		"DatabaseRegistry": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": "/Logverz/Database/Registry",
				"Type": "StringList",
				"Value": "placeholder",
				"Description": "Connection information for All Logverz Database servers."
			}
		},
		"CognitoUserPool":{
			"Type" : "AWS::Cognito::UserPool",
			"Condition" : "EnableSocialIdenties",
			"Properties" : {
				"AccountRecoverySetting" : {
					"RecoveryMechanisms" : [ {
						"Name" : "verified_email",
						"Priority" : 1
					}, {
						"Name" : "verified_phone_number",
						"Priority" : 2
					}]
				},
				"AutoVerifiedAttributes":[ "email", "phone_number" ],
				"SmsConfiguration": {
					"ExternalId": { "Fn::Select" : [ 2, { "Fn::Split" : [ "/", {"Ref": "AWS::StackId"} ] } ] },
					"SnsCallerArn": { "Fn::GetAtt" : [ "CognitoSNSRole", "Arn" ] }
				},
				"AdminCreateUserConfig" : {
					"AllowAdminCreateUserOnly" : true
				},
				"AliasAttributes" : ["phone_number", "email"],
				"Policies" : {
					"PasswordPolicy" : {
						"MinimumLength" : 8,
						"RequireLowercase" : true,
						"RequireNumbers" : true,
						"RequireSymbols" : true,
						"RequireUppercase" : false,
						"TemporaryPasswordValidityDays" : 7
					}
				},
				"Schema" : [{
					"AttributeDataType" : "String",
					"DeveloperOnlyAttribute" : false,
					"Mutable" : true,
					"Name" :"email",
					"Required" : true
				}],
				"UsernameConfiguration" : {
					"CaseSensitive" : false
				},
				"UserPoolName" : "Logverz-Logic"
			}
		},
		"CognitoUserPoolDomain":{
			"Type" : "AWS::Cognito::UserPoolDomain",
			"Condition" : "EnableSocialIdenties",
			"Properties" : {
				"Domain" : { "Fn::Select" : [ 2, { "Fn::Split" : [ "/", {"Ref": "AWS::StackId"} ] } ] },
				"UserPoolId" : {
					"Ref": "CognitoUserPool"
				}
			}
		},
		"CognitoSNSRole": {
			"Type": "AWS::IAM::Role",
			"Condition" : "EnableSocialIdenties",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"cognito-idp.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							],
							"Condition": {
								"StringEquals": {
									"sts:ExternalId": { "Fn::Select" : [ 2, { "Fn::Split" : [ "/", {"Ref": "AWS::StackId"} ] } ] }
								}
							}
						}
					]
				},
				"Policies": [
					{
						"PolicyName": "CognitoSNSPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": "sns:publish",
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"Transform": {
			"DependsOn":["LambdaSourcesAvailable"],
			"Type" : "AWS::CloudFormation::Stack",
			"Properties" : {
				"Parameters" : {
					"InitBucket":{ "Ref" : "InitBucket" }
				},
				"TemplateURL" : {
					"Fn::Sub":[ "https://${InitBucket}.s3.${AWS::Region}.amazonaws.com/templates/Logverz-Transform.json", {
						"InitBucket":{
							"Ref": "InitBucket"
						}
					}]
				}
			}
		},
		"DefaultDB": {
			"DependsOn":["Transform"],
			"Type" : "AWS::CloudFormation::Stack",
			"Properties" : {
				"Parameters" : {
					"DBAllocatedStorage" : {"Ref":"DBAllocatedStorage"},
					"DBInstanceClass":{"Ref":"DBInstanceClass"},
					"DBSnapshotID":{"Ref":"DBSnapshotID"},
					"DBPrincipalProperty":{"Ref":"DBPrincipalProperty"},
					"DBDeploymentMethod":{"Ref":"DBDeploymentMethod"},
					"DBEngineType" : {"Ref":"DBEngineType"},
					"DBUserName" : {"Ref":"DBUserName"},
					"DBUserPasswd" : {"Ref": "DBUserPasswd"},
					"DBSecGroup":{"Ref":"DBSecGroup"},
					"LogverzDBIAMGroup":{"Ref":"LogverzDBIAMGroup"},
					"SetConnectionParamsDB":{"Fn::GetAtt": [
						"SetConnectionParamsDB",
						"Arn"
					]},
					"PublicSubnet":{
						"Fn::Join": [
							",",
							{
								"Ref": "PublicSubnet"
							}
						]},
					"PrivateSubnet":{
						"Fn::Join": [
							",",
							{
								"Ref": "PrivateSubnet"
							}
						]},
					"MaximumCacheTime":{"Ref":"MaximumCacheTime"}
				},
				"TemplateURL" : {
					"Fn::Join": [
						"", ["https://s3.amazonaws.com/", { "Ref" : "InitBucket" },
							"/templates/Logverz-DefaultDB.json"
						]
					]
				}
			}
		},
		"WebRTC": {
			"DependsOn":["Transform"],
			"Type" : "AWS::CloudFormation::Stack",
			"Properties" : {
				"Parameters" : {
					"DBSecGroup":{"Ref":"DBSecGroup"},
					"WebRTCProxyAmiId" : {"Ref":"WebRTCProxyAmiId"},
					"myKeyPair" : {"Fn::If": ["HasKeyName", {"Ref": "myKeyPair"}, {"Ref": "AWS::NoValue"}]},
					"WebRTCProxyInstanceSize":{"Ref":"WebRTCProxyInstanceSize"},
					"WebRTCProxyASGConfig":{"Ref":"WebRTCProxyASGConfig"},
					"VPCID":{"Ref":"VPCID"},
					"PrivateSubnet":{
						"Fn::Join": [
							",",
							{
								"Ref": "PrivateSubnet"
							}
						]},
					"InitBucket":{ "Ref" : "InitBucket" },
					"LogicBucket":{"Ref" : "LogicBucket" },
					"PublicKeyVersion":{
						"Ref":"PublicKeyVersion"
					},
					"MaximumCacheTime":{"Ref":"MaximumCacheTime"},
					"APIGWLogverzLogic":{"Ref":"APIGWLogverzLogic"}
				},
				"TemplateURL" : {
					"Fn::Join": [
						"", ["https://s3.amazonaws.com/", { "Ref" : "InitBucket" },
							"/templates/Logverz-WebRTC.json"
						]
					]
				}
			}
		},
		"TurnSrv": {
			"DependsOn":["Transform"],
			"Type" : "AWS::CloudFormation::Stack",
			"Properties" : {
				"Parameters" : {
					"myKeyPair" : {"Fn::If": ["HasKeyName", {"Ref": "myKeyPair"}, {"Ref": "AWS::NoValue"}]},
					"TurnServerAmiId":{"Ref":"TurnServerAmiId"},
					"TurnSrvInstanceSize":{"Ref":"TurnSrvInstanceSize"},
					"TurnSrvASGConfig":{"Ref":"TurnSrvASGConfig"},
					"VPCID":{"Ref":"VPCID"},
					"PublicSubnet":{
						"Fn::Join": [
							",",
							{
								"Ref": "PublicSubnet"
							}
						]},
					"InitBucket":{ "Ref" : "InitBucket" },
					"WebRTCBucket":{"Ref":"WebRTCBucket"},
					"PublicKeyVersion":{
						"Ref":"PublicKeyVersion"
					},
					"MaximumCacheTime":{"Ref":"MaximumCacheTime"}
				},
				"TemplateURL" : {
					"Fn::Join": [
						"", ["https://s3.amazonaws.com/", { "Ref" : "InitBucket" },
							"/templates/Logverz-TurnSrv.json"
						]
					]
				}
			}
		},
		"Engine": {
			"Type" : "AWS::CloudFormation::Stack",
			"DependsOn":["DBSecGroup4MYSQL", "Transform"],
			"Properties" : {
				"Parameters" : {
					"PublicKeyVersion":{
						"Ref":"PublicKeyVersion"
					},
					"PrivateSubnet":{
						"Fn::Join": [
							",",
							{
								"Ref": "PrivateSubnet"
							}
						]
					},
					"VPCID":{"Ref": "VPCID"},
					"InitBucket":{ "Ref" : "InitBucket" },
					"EngineBucket":{ "Ref" : "EngineBucket" },
					"DBSecGroup":{"Ref":"DBSecGroup"},
					"NumberOfControllers":{"Ref":"NumberOfControllers"},
					"Tags":{ "Ref" : "InitBucket" },
					"MaximumCacheTime":{"Ref":"MaximumCacheTime"}
				},
				"TemplateURL" : {
					"Fn::Join": [
						"", ["https://s3.amazonaws.com/", { "Ref" : "InitBucket" },
							"/templates/Logverz-Engine.json"
						]
					]
				}
			}
		},
		"Logic": {
			"DependsOn":["Engine"],
			"Type" : "AWS::CloudFormation::Stack",
			"Properties" : {
				"Parameters" : {
					"PublicKeyVersion":{
						"Ref":"PublicKeyVersion"
					},
					"PrivateSubnet":{
						"Fn::Join": [
							",",
							{
								"Ref": "PrivateSubnet"
							}
						]
					},
					"InitBucket":{ "Ref" : "InitBucket" },
					"LogicBucket":{ "Ref" : "LogicBucket" },
					"WebRTCBucket":{"Ref":"WebRTCBucket"},
					"DBSecGroup":{"Ref":"DBSecGroup"},
					"APIGWLogverzLogic":{"Ref":"APIGWLogverzLogic"},
					"RootResourceId":{ "Fn::GetAtt": ["APIGWLogverzLogic", "RootResourceId"]},
					"EnableSocialIdenties":{"Fn::If": ["EnableSocialIdenties", {"Ref": "EnableSocialIdenties"}, "false"]},
					"CognitoUserPoolDomain":{"Fn::If": ["EnableSocialIdenties", {"Ref": "CognitoUserPoolDomain"}, "false"]},
					"CognitoUserPool":{"Fn::If": ["EnableSocialIdenties", {"Ref": "CognitoUserPool"}, "false"]},
					"StageName":{"Ref":"StageName"},
					"ScaleFunction": {"Fn::GetAtt": [
						"Engine",
						"Outputs.ScaleFunction"
					]
					},
					"MaximumCacheTime":{"Ref":"MaximumCacheTime"}
				},
				"TemplateURL" : {
					"Fn::Join": [
						"", ["https://", { "Ref" : "InitBucket" }, ".s3.amazonaws.com/templates/Logverz-Logic.json"
						]
					]
				}
			}
		},
		"PostDeploymentResource": {
			"Type": "Custom::LambdaFunction",
			"DependsOn":"Logic",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitiateFunction",
						"Arn"
					]
				},
				"RestApiId":{"Fn::GetAtt": [
					"Logic",
					"Outputs.RestApiId"
				]
				},
				"RestApiStageName":{"Fn::GetAtt": [
					"Logic",
					"Outputs.RestApiStageName"
				]
				},
				"ECRRepoName":{
					"Ref" : "WebRTCProxyRepository"
				},
				"ApiGWurl":{"Fn::GetAtt": [
					"Logic",
					"Outputs.ApiGWurl"
				]
				}
			}
		},
		"SSMListASGSMulti": {
			"DependsOn":"Logic",
			"Condition":"multipleinstancetypes",
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": "/Logverz/Engine/AutoScalingGroupList",
				"Type": "String",
				"Value": { "Fn::Sub": [ "{\"TurnServerASG\":\"${TurnServerASG}\",\"WebRTCProxyASG\":\"${WebRTCProxyASG}\"}", {"WebRTCProxyASG": {"Fn::GetAtt": [
					"WebRTC",
					"Outputs.WebRTCProxyASGM"
				]
				},
				"TurnServerASG": {"Fn::GetAtt": [
					"TurnSrv",
					"Outputs.TurnASGM"
				]
				}
				}]},
				"Description": "Logverz Autoscaling Groups List"
			}
		},
		"SSMListASGSSingle": {
			"DependsOn":"Logic",
			"Condition":"singleinstancetypes",
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": "/Logverz/Engine/AutoScalingGroupList",
				"Type": "String",
				"Value": { "Fn::Sub": [ "{\"TurnServerASG\":\"${TurnServerASG}\",\"WebRTCProxyASG\":\"${WebRTCProxyASG}\"}", {"WebRTCProxyASG": {"Fn::GetAtt": [
					"WebRTC",
					"Outputs.WebRTCProxyASGS"
				]
				},
				"TurnServerASG": {"Fn::GetAtt": [
					"TurnSrv",
					"Outputs.TurnASGS"
				]
				}}]},
				"Description": "Logverz Autoscaling Groups List"
			}
		},
		"Start": {
			"DependsOn":"PostDeploymentResource",
			"Type" : "AWS::CloudFormation::Stack",
			"Properties" : {
				"Parameters" : {
					"PublicKeyVersion":{
						"Ref":"PublicKeyVersion"
					},
					"InitBucket":{ "Ref" : "InitBucket" },
					"LogverzJobsQueue":{"Fn::GetAtt": [
						"Engine",
						"Outputs.JobsQueue"
					]
					},
					"RestApiId":{"Ref": "APIGWLogverzLogic"},
					"StartJob":{"Fn::GetAtt": [
						"Logic",
						"Outputs.StartJob"
					]
					},
					"MaximumCacheTime":{"Ref":"MaximumCacheTime"}
				},
				"TemplateURL" : {
					"Fn::Join": [
						"", ["https://", { "Ref" : "InitBucket" }, ".s3.amazonaws.com/templates/Logverz-EngineStart.json"
						]
					]
				}
			}
		}
	},
	"Outputs" : {
		"DBSecGroup":{
			"Description": "The security groups for the databases ",
			"Value":{"Ref":"DBSecGroup"},
			"Export" : {
				"Name" : "DBSecGroup"
			}
		},
		"SetConnectionParamsDB":{
			"Description": "The Lambdafunction that configures passwords for SQL servers",
			"Value":{"Fn::GetAtt": [
				"SetConnectionParamsDB",
				"Arn"
			]},
			"Export" : {
				"Name" : "SetConnectionParamsDB"
			}
		},
		"LoginForm":{
			"Description": "The api GW url",
			"Value":{"Fn::Sub": "https://${APIGWLogverzLogic}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/HTTP/S3/LB/public/index.html"}
		},
		"InitBucket":{
			"Description": "The bucket with Logverz application components",
			"Value":{"Ref": "InitBucket"},
			"Export" : {
				"Name" : "InitBucket"
			}
		}
	}
}
