/* eslint-disable no-redeclare */
/* eslint-disable no-var */
var AWS = require('aws-sdk')
var path = require('path')

module.exports.handler = async function (event, context) {
  if (process.env.Environment !== 'LocalDev') {
    // Prod lambda function settings
    var arnList = (context.invokedFunctionArn).split(':')
    var region = arnList[3]
    console.log('Event RECEIVED: ' + JSON.stringify(event))
    console.log('context RECEIVED: ' + JSON.stringify(context))
  } else {
    // Dev environment settings
    const mydev = require(path.join(__dirname, '..', '..', 'settings', 'LogverzDevEnvironment', 'configs', 'setconnectionparamsdns', 'mydev.js'))
    var region = mydev.region
    var event = mydev.event
    var context = mydev.context
  }

  AWS.config.update({
    region
  })

  var route53 = new AWS.Route53()
  var autoscaling = new AWS.AutoScaling()
  var ec2 = new AWS.EC2()
  // const dynamodb = new AWS.DynamoDB()
  // var docClient = new AWS.DynamoDB.DocumentClient()
  var asgname = event.resources[0].split('/')[1]
  var ASGproperties = await DescribeAutoScalingGroups(autoscaling, asgname)
  var need2notifyasg = false

  if (event.detail.NotificationMetadata !== undefined) {
    var hostedzoneid = event.detail.NotificationMetadata.hostedzoneid
    var domainname = event.detail.NotificationMetadata.domainname
    var recordname = event.detail.NotificationMetadata.recordname
    var need2notifyasg = true
  } else {
    // in case the instance fails and the event is generated by the ASG
    var licecyclehooks = await DescribeLifeCycleHooks(autoscaling, asgname)
    var NotificationMetadata = JSON.parse(licecyclehooks[0].NotificationMetadata)
    var hostedzoneid = NotificationMetadata.hostedzoneid
    var recordname = NotificationMetadata.recordname
    var domainname = NotificationMetadata.domainname
  }

  var asginstances = ASGproperties[0].Instances.map(i => i.InstanceId)
  console.log('ASG instaces: \n')
  console.log(JSON.stringify(asginstances))
  var config = await ManageDNSConfig(ec2, asginstances, hostedzoneid, domainname, recordname)
  // var r53results=
  await UPSERTDNS(route53, config)

  if (need2notifyasg) {
    var LifecycleParams = {
      AutoScalingGroupName: event.detail.AutoScalingGroupName,
      LifecycleActionResult: 'CONTINUE',
      LifecycleActionToken: event.detail.LifecycleActionToken,
      LifecycleHookName: event.detail.LifecycleHookName
    }
    var asgresult = await NotifyAutoScalingGroup(autoscaling, LifecycleParams)
    console.log('ASG result:\n')
    console.log(JSON.stringify(asgresult))
  }

  var response = {
    statusCode: 200,
    body: 'SUCCESS'
  }
  return response
}

async function NotifyAutoScalingGroup (autoscaling, LifecycleParams) {
  var promisedresult = new Promise((resolve, reject) => {
    autoscaling.completeLifecycleAction(LifecycleParams, function (err, data) {
      if (err) {
        console.error(err)
        reject(err)
      } else {
        // console.log("Successfully completed api call with parameter: "+asgname+".");
        resolve(data)
      }
    })
  })

  var result = await promisedresult
  return result
}

async function ManageDNSConfig (ec2, asginstances, hostedzoneid, domainname, recordname) {
  if (asginstances.length !== 0) {
    var EC2properties = await DescribeEc2Instances(ec2, asginstances)
    var ec2publicips = EC2properties.map(ec2 => ec2.Instances[0].PublicIpAddress)
    var config = {
      ChangeBatch: {
        Changes: [{
          Action: 'UPSERT',
          ResourceRecordSet: {
            Name: recordname + '.' + domainname,
            ResourceRecords: ec2publicips.map(r => {
              return {
                Value: r
              }
            }),
            TTL: 300,
            Type: 'A'
          }
        }],
        Comment: 'Adding Turserver for ' + domainname
      },
      HostedZoneId: hostedzoneid
    }
  } else {
    var config = {
      ChangeBatch: {
        Changes: [{
          Action: 'UPSERT',
          ResourceRecordSet: {
            Name: recordname + '.' + domainname,
            ResourceRecords: [{
              Value: '0.0.0.0'
            }],
            TTL: 60,
            Type: 'A'
          }
        }],
        Comment: 'Removing previous Turserver ip for ' + domainname
      },
      HostedZoneId: hostedzoneid
    }
  }
  console.log('DNS config: \n')
  console.log(JSON.stringify(config))
  return config
}

async function UPSERTDNS (route53, config) {
  var promisedresult = new Promise((resolve, reject) => {
    route53.changeResourceRecordSets(config, function (err, data) {
      if (err) {
        console.error(err)
        reject(err)
      } else {
        console.log('Successfully completed Route 53 create/delete api call with parameters: \n\n' + JSON.stringify(config) + '.')
        resolve(data)
      }
    })
  })

  var result = await promisedresult
  return result
}

async function DescribeAutoScalingGroups (autoscaling, asgname) {
  var parameters = {
    AutoScalingGroupNames: [asgname]
  }
  var promisedresult = new Promise((resolve, reject) => {
    autoscaling.describeAutoScalingGroups(parameters, function (err, data) {
      if (err) {
        console.error(err)
        reject(err)
      } else {
        // console.log("Successfully completed api call with parameter: "+asgname+".");
        resolve(data)
      }
    })
  })

  var result = await promisedresult
  return result.AutoScalingGroups
}

async function DescribeLifeCycleHooks (autoscaling, asgname) {
  var parameters = {
    AutoScalingGroupName: asgname
  }
  var promisedresult = new Promise((resolve, reject) => {
    autoscaling.describeLifecycleHooks(parameters, function (err, data) {
      if (err) {
        console.error(err)
        reject(err)
      } else {
        // console.log("Successfully completed api call with parameter: "+asgname+".");
        resolve(data)
      }
    })
  })

  var result = await promisedresult
  return result.LifecycleHooks
}

async function DescribeEc2Instances (ec2, asginstances) {
  var parameters = {
    InstanceIds: asginstances
  }
  var promisedresult = new Promise((resolve, reject) => {
    ec2.describeInstances(parameters, function (err, data) {
      if (err) {
        console.error(err)
        reject(err)
      } else {
        // console.log("Successfully completed api call with parameter: "+asgname+".");
        resolve(data)
      }
    })
  })

  var result = await promisedresult
  return result.Reservations
}
