/* eslint-disable no-redeclare */
/* eslint-disable no-var */
/* eslint brace-style: ["error", "stroustrup"] */

import { AutoScalingClient, CompleteLifecycleActionCommand, DescribeAutoScalingGroupsCommand, DescribeLifecycleHooksCommand } from '@aws-sdk/client-auto-scaling'
import { EC2Client, DescribeInstancesCommand } from '@aws-sdk/client-ec2'
import { Route53Client, ChangeResourceRecordSetsCommand } from '@aws-sdk/client-route-53'
import path from 'path'
import { fileURLToPath } from 'url'
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

export const handler = async (event, context) => {
  if (process.env.Environment !== 'LocalDev') {
    // Prod lambda function settings
    var arnList = (context.invokedFunctionArn).split(':')
    var region = arnList[3]
    console.log('Event RECEIVED: ' + JSON.stringify(event))
    console.log('context RECEIVED: ' + JSON.stringify(context))
  }
  else {
    // Dev environment settings
    var directory = path.join(__dirname, '..', '..', 'settings', 'LogverzDevEnvironment', 'configs', 'setconnectionparamsdns', 'mydev.mjs')
    const mydev = await import('file:///' + directory.replace(/\\/g, '/'))
    var region = mydev.region
    var event = mydev.event
    var context = mydev.context
  }

  var config = {
    region
  }

  const r53client = new Route53Client(config)
  const asclient = new AutoScalingClient(config)
  const ec2client = new EC2Client(config)
  var asgname = event.resources[0].split('/')[1]

  const command = new DescribeAutoScalingGroupsCommand({ AutoScalingGroupNames: [asgname] })
  var ASGproperties = (await asclient.send(command)).AutoScalingGroups
  var need2notifyasg = false

  if (event.detail.NotificationMetadata !== undefined) {
    var hostedzoneid = event.detail.NotificationMetadata.hostedzoneid
    var domainname = event.detail.NotificationMetadata.domainname
    var recordname = event.detail.NotificationMetadata.recordname
    var need2notifyasg = true
  }
  else {
    // in case the instance fails and the event is generated by the ASG
    const command = new DescribeLifecycleHooksCommand({ AutoScalingGroupName: [asgname] })
    var licecyclehooks = (await asclient.send(command)).LifecycleHooks

    var NotificationMetadata = JSON.parse(licecyclehooks[0].NotificationMetadata)
    var hostedzoneid = NotificationMetadata.hostedzoneid
    var recordname = NotificationMetadata.recordname
    var domainname = NotificationMetadata.domainname
  }

  var asginstances = ASGproperties[0].Instances.map(i => i.InstanceId)
  console.log('ASG instaces: \n')
  console.log(JSON.stringify(asginstances))
  var R53config = await ManageDNSConfig(ec2client, asginstances, hostedzoneid, domainname, recordname)
  const R53command = new ChangeResourceRecordSetsCommand(R53config)
  await r53client.send(R53command)

  if (need2notifyasg) {
    var LifecycleParams = {
      AutoScalingGroupName: event.detail.AutoScalingGroupName,
      LifecycleActionResult: 'CONTINUE',
      LifecycleActionToken: event.detail.LifecycleActionToken,
      LifecycleHookName: event.detail.LifecycleHookName
    }

    const command = new CompleteLifecycleActionCommand(LifecycleParams)
    var asgresult = await asclient.send(command)
    console.log('ASG result:\n')
    console.log(JSON.stringify(asgresult))
  }

  var response = {
    statusCode: 200,
    body: 'SUCCESS'
  }
  return response
}

async function ManageDNSConfig (ec2client, asginstances, hostedzoneid, domainname, recordname) {
  if (asginstances.length !== 0) {
    const input = {
      InstanceIds: asginstances
    }
    const command = new DescribeInstancesCommand(input)
    var EC2properties = (await ec2client.send(command)).Reservations
    var ec2publicips = EC2properties.map(ec2 => ec2.Instances[0].PublicIpAddress)

    var config = {
      ChangeBatch: {
        Changes: [{
          Action: 'UPSERT',
          ResourceRecordSet: {
            Name: recordname + '.' + domainname,
            ResourceRecords: ec2publicips.map(r => {
              return {
                Value: r
              }
            }),
            TTL: 300,
            Type: 'A'
          }
        }],
        Comment: 'Adding Turserver for ' + domainname
      },
      HostedZoneId: hostedzoneid
    }
  }
  else {
    var config = {
      ChangeBatch: {
        Changes: [{
          Action: 'UPSERT',
          ResourceRecordSet: {
            Name: recordname + '.' + domainname,
            ResourceRecords: [{
              Value: '0.0.0.0'
            }],
            TTL: 60,
            Type: 'A'
          }
        }],
        Comment: 'Removing previous Turserver ip for ' + domainname
      },
      HostedZoneId: hostedzoneid
    }
  }
  console.log('DNS config: \n')
  console.log(JSON.stringify(config))

  return config
}
